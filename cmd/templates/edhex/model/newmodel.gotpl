{{ $slice := parseToUpperCamelCase .Table -}}
{{ $reciverName := getFirstLetter .Model -}}

package model

import (
	"time"
	{{ if eq .IDType "uuid.UUID" }}"github.com/google/uuid"{{end}}
)
// {{ .Model }} model of table {{ .Table }}
type {{ .Model }} struct {
	{{ range $i, $field := .Fields -}}
		{{ parseToUpperCamelCase $field.Name }} {{ $field.Type }} `json:"{{ $field.Name }}"`
	{{ end -}}
}

{{if eq .IDType "uint" }}
func ({{ $reciverName }} {{ .Model }}) HasID() bool { return {{ $reciverName }}.ID > 0 }
{{end}}
{{if eq .IDType "uuid.UUID" }}
func ({{ $reciverName }} {{ .Model }}) HasID() bool { return {{ $reciverName }}.ID.String() != "00000000-0000-0000-0000-000000000000" }
{{end}}

func ({{ $reciverName }} {{ .Model }}) Validate() error {
	// implement validation of fields for creation and update
	return nil
}

// {{ $slice }} slice of {{ .Model }}
type {{ $slice }} []{{ .Model }}

func ({{ $reciverName }} {{ $slice }}) IsEmpty() bool { return len({{ $reciverName }}) == 0 }
