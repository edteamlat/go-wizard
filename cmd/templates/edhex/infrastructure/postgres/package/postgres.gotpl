{{ $packageName := parseToLower .Model -}}
{{ $receiverName := getFirstLetter .Model -}}
{{ $slice := parseToUpperCamelCase .Table -}}

package {{ $packageName }}

import (
	"database/sql"

	"{{ .ModuleName }}/model"

	"github.com/AJRDRGZ/db-query-builder/models"
	"github.com/AJRDRGZ/db-query-builder/postgres"
	"github.com/AJRDRGZ/db-query-builder/nullhandler"
)

const table = "{{ .Table }}"

var fields = []string{
	{{ printFieldsWithoutDefaults .Fields }}
}

var constraints = postgres.Constraints{
	// here you will add all constraints that you want to controle, ex:
	// "users_nickname_uk":                model.ErrUsersNicknameUK,
}

var (
	psqlInsert                  = {{ if eq .IDType "uint" }}postgres.BuildSQLInsert(table, fields){{ else }}postgres.BuildSQLInsertWithID(table, fields){{ end }}
	psqlUpdate                  = postgres.BuildSQLUpdateByID(table, fields)
	psqlDelete                  = "DELETE FROM " + table + " WHERE id = $1"
	psqlGetAll                  = postgres.BuildSQLSelect(table, fields)
)

// {{ .Model }} struct that implement the interface domain.{{ $packageName }}.Storage
type {{ .Model }} struct {
	db *sql.DB
}

// New returns a new {{ .Model }} storage
func New(db *sql.DB) {{ .Model }} {
	return {{ .Model }}{db}
}

// Create creates a model.{{ .Model }}
func ({{ $receiverName }} {{ .Model }}) Create(m *model.{{ .Model }}) error {
	stmt, err := {{ $receiverName }}.db.Prepare(psqlInsert)
	if err != nil {
		return err
	}
	defer stmt.Close()

	err = stmt.QueryRow(
		{{- if eq .IDType "uint"}}
		{{ printStorageFieldsWithoutDefaults .Fields}}
	).Scan(&m.ID, &m.CreatedAt)
	{{- else}}
		{{ printStorageFieldsWithoutDateDefaults .Fields}}
	).Scan(&m.CreatedAt)
	{{- end}}
	if err != nil {
		return postgres.CheckConstraint(constraints, err)
	}

	return nil
}

// Update this method updates a model.{{ .Model }} by id
func ({{ $receiverName }} {{ .Model }}) Update(m *model.{{ .Model }}) error {
	stmt, err := {{ $receiverName }}.db.Prepare(psqlUpdate)
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(
		{{ printStorageFieldsWithoutDefaults .Fields }}
		m.ID,
	)
	if err != nil {
		return postgres.CheckConstraint(constraints, err)
	}

	return nil
}

// Delete deletes a model.{{ .Model }} by id
func ({{ $receiverName }} {{ .Model }}) Delete(ID uint) error {
	stmt, err := {{ $receiverName }}.db.Prepare(psqlDelete)
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(ID)
	if err != nil {
		return postgres.CheckConstraint(constraints, err)
	}

	return nil
}

// GetWhere gets an ordered model.{{ .Model }} with filters
func ({{ $receiverName }} {{ .Model }}) GetWhere(specification models.FieldsSpecification) (model.{{ .Model }}, error) {
	conditions, args := postgres.BuildSQLWhere(specification.Filters)
	query := psqlGetAll + " " + conditions

	query += " " + postgres.BuildSQLOrderBy(specification.Sorts)

	stmt, err := {{ $receiverName }}.db.Prepare(query)
	if err != nil {
		return model.{{ .Model }}{}, err
	}
	defer stmt.Close()

	return {{ $receiverName }}.scanRow(stmt.QueryRow(args...))
}

// GetAllWhere gets all model.{{ .Model }}s with Fields
func ({{ $receiverName }} {{ .Model }}) GetAllWhere(specification models.FieldsSpecification) (model.{{ $slice }}, error) {
	conditions, args := postgres.BuildSQLWhere(specification.Filters)
	query := psqlGetAll + " " + conditions

	query += " " + postgres.BuildSQLOrderBy(specification.Sorts)
	query += " " + postgres.BuildSQLPagination(specification.Pagination)

	stmt, err := {{ $receiverName }}.db.Prepare(query)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	ms := model.{{ $slice }}{}
	for rows.Next() {
		m, err := {{ $receiverName }}.scanRow(rows)
		if err != nil {
			return nil, err
		}

		ms = append(ms, m)
	}

	return ms, nil
}

func ({{ $receiverName }} {{ .Model }}) scanRow(s postgres.RowScanner) (model.{{ .Model }}, error) {
	m := model.{{ .Model }}{}

	{{ printStorageNullFields .Fields }}

	err := s.Scan(
		{{ printStorageNullFieldsScan .Fields }}
	)
	if err != nil {
		return m, err
	}

	{{ printStorageNullFieldsParse .Fields }}

	return m, nil
}
